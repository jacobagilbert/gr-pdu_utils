/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(constants.h)                                               */
/* BINDTOOL_HEADER_FILE_HASH(f341ccc6c1d48bc8b7776ffca23c20e8)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <pdu_utils/constants.h>
// pydoc.h is automatically generated in the build directory
#include <constants_pydoc.h>

void bind_constants(py::module& m)
{


    py::enum_<::gr::pdu_utils::bit_order>(m, "bit_order")
        .value("BIT_ORDER_MSB_FIRST", ::gr::pdu_utils::BIT_ORDER_MSB_FIRST) // 0
        .value("BIT_ORDER_LSB_FIRST", ::gr::pdu_utils::BIT_ORDER_LSB_FIRST) // 1
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::bit_order>();
    py::enum_<::gr::pdu_utils::pack_unpack_mode>(m, "pack_unpack_mode")
        .value("MODE_UNPACK_BYTE", ::gr::pdu_utils::MODE_UNPACK_BYTE)   // 0
        .value("MODE_PACK_BYTE", ::gr::pdu_utils::MODE_PACK_BYTE)       // 1
        .value("MODE_BITSWAP_BYTE", ::gr::pdu_utils::MODE_BITSWAP_BYTE) // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::pack_unpack_mode>();
    py::enum_<::gr::pdu_utils::input_type>(m, "input_type")
        .value("INPUTTYPE_UNPACKED_BYTE", ::gr::pdu_utils::INPUTTYPE_UNPACKED_BYTE) // 0
        .value("INPUTTYPE_PACKED_BYTE", ::gr::pdu_utils::INPUTTYPE_PACKED_BYTE)     // 1
        .value("INPUTTYPE_FLOAT", ::gr::pdu_utils::INPUTTYPE_FLOAT)                 // 1
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::input_type>();
    py::enum_<::gr::pdu_utils::early_burst_behavior>(m, "early_burst_behavior")
        .value("EARLY_BURST_BEHAVIOR__APPEND",
               ::gr::pdu_utils::EARLY_BURST_BEHAVIOR__APPEND) // 0
        .value("EARLY_BURST_BEHAVIOR__DROP",
               ::gr::pdu_utils::EARLY_BURST_BEHAVIOR__DROP) // 1
        .value("EARLY_BURST_BEHAVIOR__BALK",
               ::gr::pdu_utils::EARLY_BURST_BEHAVIOR__BALK) // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::early_burst_behavior>();
    py::enum_<::gr::pdu_utils::message_trigger_mode>(m, "message_trigger_mode")
        .value("TX_UNLIMITED", ::gr::pdu_utils::TX_UNLIMITED) // 18446744073709551615
        .value("TX_OFF", ::gr::pdu_utils::TX_OFF)             // 0
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::message_trigger_mode>();
    py::enum_<::gr::pdu_utils::noise_dist>(m, "noise_dist")
        .value("UNIFORM", ::gr::pdu_utils::UNIFORM)   // 0
        .value("GAUSSIAN", ::gr::pdu_utils::GAUSSIAN) // 1
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::noise_dist>();
    py::enum_<::gr::pdu_utils::window_type>(m, "window_type")
        .value("TUKEY_WIN", ::gr::pdu_utils::TUKEY_WIN)       // 0
        .value("GAUSSIAN_WIN", ::gr::pdu_utils::GAUSSIAN_WIN) // 1
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::window_type>();
    py::enum_<::gr::pdu_utils::align_modes>(m, "align_modes")
        .value("ALIGN_DROP", ::gr::pdu_utils::ALIGN_DROP)       // 0
        .value("ALIGN_FORWARD", ::gr::pdu_utils::ALIGN_FORWARD) // 1
        .value("ALIGN_EMPTY", ::gr::pdu_utils::ALIGN_EMPTY)     // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::pdu_utils::align_modes>();


    m.def("PMTCONSTSTR__msg", &::gr::pdu_utils::PMTCONSTSTR__msg, D(PMTCONSTSTR__msg));


    m.def("PMTCONSTSTR__in", &::gr::pdu_utils::PMTCONSTSTR__in, D(PMTCONSTSTR__in));


    m.def("PMTCONSTSTR__out", &::gr::pdu_utils::PMTCONSTSTR__out, D(PMTCONSTSTR__out));


    m.def("PMTCONSTSTR__pdu_in",
          &::gr::pdu_utils::PMTCONSTSTR__pdu_in,
          D(PMTCONSTSTR__pdu_in));


    m.def("PMTCONSTSTR__pdu_out",
          &::gr::pdu_utils::PMTCONSTSTR__pdu_out,
          D(PMTCONSTSTR__pdu_out));


    m.def("PMTCONSTSTR__cpdus",
          &::gr::pdu_utils::PMTCONSTSTR__cpdus,
          D(PMTCONSTSTR__cpdus));


    m.def("PMTCONSTSTR__fpdus",
          &::gr::pdu_utils::PMTCONSTSTR__fpdus,
          D(PMTCONSTSTR__fpdus));


    m.def("PMTCONSTSTR__burst_time",
          &::gr::pdu_utils::PMTCONSTSTR__burst_time,
          D(PMTCONSTSTR__burst_time));


    m.def("PMTCONSTSTR__start_time",
          &::gr::pdu_utils::PMTCONSTSTR__start_time,
          D(PMTCONSTSTR__start_time));


    m.def("PMTCONSTSTR__start_time_offset",
          &::gr::pdu_utils::PMTCONSTSTR__start_time_offset,
          D(PMTCONSTSTR__start_time_offset));


    m.def("PMTCONSTSTR__rx_time",
          &::gr::pdu_utils::PMTCONSTSTR__rx_time,
          D(PMTCONSTSTR__rx_time));


    m.def("PMTCONSTSTR__tx_time",
          &::gr::pdu_utils::PMTCONSTSTR__tx_time,
          D(PMTCONSTSTR__tx_time));


    m.def("PMTCONSTSTR__uhd_time_tuple",
          &::gr::pdu_utils::PMTCONSTSTR__uhd_time_tuple,
          D(PMTCONSTSTR__uhd_time_tuple));


    m.def("PMTCONSTSTR__dict", &::gr::pdu_utils::PMTCONSTSTR__dict, D(PMTCONSTSTR__dict));


    m.def("PMTCONSTSTR__data", &::gr::pdu_utils::PMTCONSTSTR__data, D(PMTCONSTSTR__data));


    m.def("PMTCONSTSTR__emit", &::gr::pdu_utils::PMTCONSTSTR__emit, D(PMTCONSTSTR__emit));


    m.def("PMTCONSTSTR__head", &::gr::pdu_utils::PMTCONSTSTR__head, D(PMTCONSTSTR__head));


    m.def("PMTCONSTSTR__tail", &::gr::pdu_utils::PMTCONSTSTR__tail, D(PMTCONSTSTR__tail));


    m.def("PMTCONSTSTR__ctrl", &::gr::pdu_utils::PMTCONSTSTR__ctrl, D(PMTCONSTSTR__ctrl));


    m.def("PMTCONSTSTR__conf", &::gr::pdu_utils::PMTCONSTSTR__conf, D(PMTCONSTSTR__conf));


    m.def("PMTCONSTSTR__val", &::gr::pdu_utils::PMTCONSTSTR__val, D(PMTCONSTSTR__val));


    m.def("PMTCONSTSTR__key", &::gr::pdu_utils::PMTCONSTSTR__key, D(PMTCONSTSTR__key));


    m.def("PMTCONSTSTR__set_val",
          &::gr::pdu_utils::PMTCONSTSTR__set_val,
          D(PMTCONSTSTR__set_val));


    m.def("PMTCONSTSTR__set_key",
          &::gr::pdu_utils::PMTCONSTSTR__set_key,
          D(PMTCONSTSTR__set_key));


    m.def("PMTCONSTSTR__bursts",
          &::gr::pdu_utils::PMTCONSTSTR__bursts,
          D(PMTCONSTSTR__bursts));


    m.def("PMTCONSTSTR__detects",
          &::gr::pdu_utils::PMTCONSTSTR__detects,
          D(PMTCONSTSTR__detects));


    m.def("PMTCONSTSTR__debug",
          &::gr::pdu_utils::PMTCONSTSTR__debug,
          D(PMTCONSTSTR__debug));


    m.def("PMTCONSTSTR__zeroX",
          &::gr::pdu_utils::PMTCONSTSTR__zeroX,
          D(PMTCONSTSTR__zeroX));


    m.def("PMTCONSTSTR__window",
          &::gr::pdu_utils::PMTCONSTSTR__window,
          D(PMTCONSTSTR__window));


    m.def("PMTCONSTSTR__burst_id",
          &::gr::pdu_utils::PMTCONSTSTR__burst_id,
          D(PMTCONSTSTR__burst_id));


    m.def("PMTCONSTSTR__burst_index",
          &::gr::pdu_utils::PMTCONSTSTR__burst_index,
          D(PMTCONSTSTR__burst_index));


    m.def("PMTCONSTSTR__eob_offset",
          &::gr::pdu_utils::PMTCONSTSTR__eob_offset,
          D(PMTCONSTSTR__eob_offset));


    m.def("PMTCONSTSTR__eob_alignment",
          &::gr::pdu_utils::PMTCONSTSTR__eob_alignment,
          D(PMTCONSTSTR__eob_alignment));


    m.def("PMTCONSTSTR__sample_rate",
          &::gr::pdu_utils::PMTCONSTSTR__sample_rate,
          D(PMTCONSTSTR__sample_rate));


    m.def("PMTCONSTSTR__symbol_rate",
          &::gr::pdu_utils::PMTCONSTSTR__symbol_rate,
          D(PMTCONSTSTR__symbol_rate));


    m.def("PMTCONSTSTR__tx_sob",
          &::gr::pdu_utils::PMTCONSTSTR__tx_sob,
          D(PMTCONSTSTR__tx_sob));


    m.def("PMTCONSTSTR__tx_eob",
          &::gr::pdu_utils::PMTCONSTSTR__tx_eob,
          D(PMTCONSTSTR__tx_eob));


    m.def("PMTCONSTSTR__pdu_num",
          &::gr::pdu_utils::PMTCONSTSTR__pdu_num,
          D(PMTCONSTSTR__pdu_num));


    m.def("PMTCONSTSTR__time_type",
          &::gr::pdu_utils::PMTCONSTSTR__time_type,
          D(PMTCONSTSTR__time_type));


    m.def("PMTCONSTSTR__wall_clock_time",
          &::gr::pdu_utils::PMTCONSTSTR__wall_clock_time,
          D(PMTCONSTSTR__wall_clock_time));


    m.def("PMTCONSTSTR__duration",
          &::gr::pdu_utils::PMTCONSTSTR__duration,
          D(PMTCONSTSTR__duration));


    m.def("PMTCONSTSTR__set_trigger_tag",
          &::gr::pdu_utils::PMTCONSTSTR__set_trigger_tag,
          D(PMTCONSTSTR__set_trigger_tag));


    m.def("PMTCONSTSTR__set_arming_tag",
          &::gr::pdu_utils::PMTCONSTSTR__set_arming_tag,
          D(PMTCONSTSTR__set_arming_tag));


    m.def("PMTCONSTSTR__set_tx_limit",
          &::gr::pdu_utils::PMTCONSTSTR__set_tx_limit,
          D(PMTCONSTSTR__set_tx_limit));


    m.def("PMTCONSTSTR__set_delays",
          &::gr::pdu_utils::PMTCONSTSTR__set_delays,
          D(PMTCONSTSTR__set_delays));


    m.def("PMTCONSTSTR__set_message",
          &::gr::pdu_utils::PMTCONSTSTR__set_message,
          D(PMTCONSTSTR__set_message));


    m.def("PMTCONSTSTR__set_holdoff",
          &::gr::pdu_utils::PMTCONSTSTR__set_holdoff,
          D(PMTCONSTSTR__set_holdoff));


    m.def("PMTCONSTSTR__set_armed",
          &::gr::pdu_utils::PMTCONSTSTR__set_armed,
          D(PMTCONSTSTR__set_armed));


    m.def("PMTCONSTSTR__trigger_now",
          &::gr::pdu_utils::PMTCONSTSTR__trigger_now,
          D(PMTCONSTSTR__trigger_now));


    m.def("PMTCONSTSTR__system",
          &::gr::pdu_utils::PMTCONSTSTR__system,
          D(PMTCONSTSTR__system));


    m.def("PMTCONSTSTR__phase_inc",
          &::gr::pdu_utils::PMTCONSTSTR__phase_inc,
          D(PMTCONSTSTR__phase_inc));


    m.def("PMTCONSTSTR__start_offset",
          &::gr::pdu_utils::PMTCONSTSTR__start_offset,
          D(PMTCONSTSTR__start_offset));


    m.def("PMTCONSTSTR__end_offset",
          &::gr::pdu_utils::PMTCONSTSTR__end_offset,
          D(PMTCONSTSTR__end_offset));


    m.def("PMTCONSTSTR__input_rate",
          &::gr::pdu_utils::PMTCONSTSTR__input_rate,
          D(PMTCONSTSTR__input_rate));
}
